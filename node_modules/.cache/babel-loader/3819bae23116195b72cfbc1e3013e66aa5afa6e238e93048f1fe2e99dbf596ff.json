{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\project3\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { NoteContext } from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  //Get all notes\n\n  const getNotes = async () => {\n    //TODO API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n      // body:JSON.stringify({title,description,tag})\n    });\n\n    const json = await response.json();\n    setNotes(json);\n    // setNotes(notes.concat(note))\n  };\n\n  //Add a note\n  const addNote = async (title, description, tag) => {\n    //TODO API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    // const note = json\n    setNotes(notes.concat(note));\n  };\n  //Delete a note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    console.log(\"Note is deleting...\");\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  //Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    //API call\n    for (let i = 0; i < newNotes.length; i++) {\n      const element = newNotes[i];\n      if (element._id === id) {\n        newNotes[i].title = title;\n        newNotes[i].description = description;\n        newNotes[i].tag = tag;\n        break;\n      }\n    }\n    setNotes(notes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: [\" \", props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 14\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","i","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Project/project3/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { NoteContext } from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitial = []\r\n    const [notes, setNotes] = useState(notesInitial)\r\n\r\n    //Get all notes\r\n\r\n    const getNotes = async() => {\r\n\r\n        //TODO API call\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            // body:JSON.stringify({title,description,tag})\r\n        });\r\n\r\n        const json = await response.json()\r\n        setNotes(json)\r\n            // setNotes(notes.concat(note))\r\n    }\r\n\r\n\r\n    //Add a note\r\n    const addNote = async(title, description, tag) => {\r\n\r\n            //TODO API call\r\n            const response = await fetch(`${host}/api/notes/addnote`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ title, description, tag })\r\n            });\r\n\r\n            const note = await response.json()\r\n                // const note = json\r\n            setNotes(notes.concat(note))\r\n        }\r\n        //Delete a note\r\n    const deleteNote = async(id) => {\r\n            const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n\r\n            });\r\n\r\n            const json = response.json()\r\n            console.log(json)\r\n            console.log(\"Note is deleting...\")\r\n            const newNotes = notes.filter((note) => { return note._id !== id })\r\n            setNotes(newNotes)\r\n        }\r\n        //Edit a note\r\n    const editNote = async(id, title, description, tag) => {\r\n\r\n\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n\r\n        const json = response.json()\r\n\r\n        let newNotes = JSON.parse(JSON.stringify(notes))\r\n            //API call\r\n        for (let i = 0; i < newNotes.length; i++) {\r\n            const element = newNotes[i];\r\n            if (element._id === id) {\r\n                newNotes[i].title = title;\r\n                newNotes[i].description = description;\r\n                newNotes[i].tag = tag;\r\n                break;\r\n            }\r\n        }\r\n        setNotes(notes);\r\n    }\r\n\r\n    return ( <\r\n        NoteContext.Provider value = {\r\n            { notes, addNote, deleteNote, editNote, getNotes }\r\n        } > { props.children } <\r\n        /NoteContext.Provider>\r\n    );\r\n};\r\n\r\nexport default NoteState;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACQ,YAAY,CAAC;;EAEhD;;EAEA,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAW;IAExB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,0BAAyB,EAAE;MAC5DO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;MACA;IACJ,CAAC,CAAC;;IAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCN,QAAQ,CAACM,IAAI,CAAC;IACV;EACR,CAAC;;EAGD;EACA,MAAMC,OAAO,GAAG,MAAAA,CAAMC,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IAE1C;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,oBAAmB,EAAE;MACtDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,KAAK;QAAEC,WAAW;QAAEC;MAAI,CAAC;IACpD,CAAC,CAAC;IAEF,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B;IACJN,QAAQ,CAACD,KAAK,CAACgB,MAAM,CAACD,IAAI,CAAC,CAAC;EAChC,CAAC;EACD;EACJ,MAAME,UAAU,GAAG,MAAMC,EAAE,IAAK;IACxB,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBoB,EAAG,EAAC,EAAE;MAC/Db,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IAEJ,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC5BY,OAAO,CAACC,GAAG,CAACb,IAAI,CAAC;IACjBY,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMC,QAAQ,GAAGrB,KAAK,CAACsB,MAAM,CAAEP,IAAI,IAAK;MAAE,OAAOA,IAAI,CAACQ,GAAG,KAAKL,EAAE;IAAC,CAAC,CAAC;IACnEjB,QAAQ,CAACoB,QAAQ,CAAC;EACtB,CAAC;EACD;EACJ,MAAMG,QAAQ,GAAG,MAAAA,CAAMN,EAAE,EAAET,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IAGnD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBoB,EAAG,EAAC,EAAE;MAC/Db,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,KAAK;QAAEC,WAAW;QAAEC;MAAI,CAAC;IACpD,CAAC,CAAC;IAEF,MAAMJ,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAE5B,IAAIc,QAAQ,GAAGR,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACC,SAAS,CAACd,KAAK,CAAC,CAAC;IAC5C;IACJ,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,OAAO,GAAGP,QAAQ,CAACK,CAAC,CAAC;MAC3B,IAAIE,OAAO,CAACL,GAAG,KAAKL,EAAE,EAAE;QACpBG,QAAQ,CAACK,CAAC,CAAC,CAACjB,KAAK,GAAGA,KAAK;QACzBY,QAAQ,CAACK,CAAC,CAAC,CAAChB,WAAW,GAAGA,WAAW;QACrCW,QAAQ,CAACK,CAAC,CAAC,CAACf,GAAG,GAAGA,GAAG;QACrB;MACJ;IACJ;IACAV,QAAQ,CAACD,KAAK,CAAC;EACnB,CAAC;EAED,oBAASN,OAAA,CACLF,WAAW,CAACqC,QAAQ;IAACC,KAAK,EACtB;MAAE9B,KAAK;MAAEQ,OAAO;MAAES,UAAU;MAAEO,QAAQ;MAAEtB;IAAS,CACpD;IAAA6B,QAAA,GAAE,GAAC,EAAEnC,KAAK,CAACmC,QAAQ,EAAE,GAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAE9B,CAAC;AAACtC,EAAA,CA1FIF,SAAS;AAAAyC,EAAA,GAATzC,SAAS;AA4Ff,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}